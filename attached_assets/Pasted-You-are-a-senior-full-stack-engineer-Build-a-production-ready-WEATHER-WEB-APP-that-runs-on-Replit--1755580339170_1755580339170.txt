You are a senior full-stack engineer. Build a production-ready WEATHER WEB APP that runs on Replit.

========================
SCOPE & OUTCOMES
========================
Create a Flask-based web app that shows current weather and a 5-day forecast for a searched city and for the user’s current location (via browser geolocation). Include a clean, responsive UI, caching, error handling, tests, and deployment setup for Replit.

Deliverables to output in this single response:
1) A short project plan (1–2 paragraphs) explaining the approach and key tradeoffs.
2) Complete source code for ALL files with clear file paths and contents. Use fenced code blocks per file.
3) Setup/run instructions tailored to Replit, including how to add the API key in Replit Secrets.
4) Basic tests (pytest) for the API client and caching layer.
5) A concise README.md.
6) Notes on future improvements (2–5 bullets).

========================
TECH STACK & CONSTRAINTS
========================
- Backend: Python 3.11+, Flask.
- HTTP client: requests.
- Caching: simple in-memory cache with TTL (e.g., dict with timestamps) + a clear layer where a Redis cache could be swapped in later.
- Frontend: Jinja2 templates with vanilla JS Fetch API; Tailwind via CDN for styling; no heavy front-end framework.
- Charts: Use Chart.js via CDN to plot temperature over time for the forecast.
- Geolocation: Use the browser Geolocation API; if permissions denied, app should gracefully fall back to manual city search.
- API: Use OpenWeatherMap (free tier). Endpoints:
  - Current: https://api.openweathermap.org/data/2.5/weather
  - Forecast (5-day/3-hour): https://api.openweathermap.org/data/2.5/forecast
- Environment variables via Replit Secrets:
  - WEATHER_API_KEY
- Time & Units:
  - Default units = metric (°C, m/s). Provide a toggle for metric/imperial that persists in localStorage and is sent as a query param on API requests.
- Accessibility: Label all inputs, ensure sufficient contrast, keyboard nav works, and announce error messages politely.

========================
FEATURES (BASE SCOPE)
========================
1) Search by city name:
   - Input + “Search” button in the header.
   - Debounce (300ms) and press Enter to submit.
2) Current weather card:
   - City, country, local date/time (use timezone offset from API), temperature, “feels like”, humidity, wind speed, weather icon/description.
3) 5-day forecast:
   - Display at least 8–10 upcoming data points as a line chart (temperature vs time) using Chart.js, plus a compact list view (time, icon, temp).
4) Use my location:
   - Button that requests geolocation; if granted, reverse lookup weather using coords (lat/lon to the same API).
5) Units toggle:
   - Metric/imperial switch; persist in localStorage; reflect in UI and API queries.
6) Caching:
   - Cache responses by (endpoint + query + units) for 10 minutes to reduce API calls; include a simple TTL invalidation.
7) Errors & empty states:
   - If city not found / API limit / network error: show friendly inline error with retry option.
   - Skeleton states for current weather card and forecast before data loads.
8) Logging:
   - Log inbound requests, cache hits/misses, API errors to console (info/warn/error) with timestamps.

========================
STRETCH FEATURES (OPTIONAL IF TIME)
========================
- “Favorites” (star icon on city): store up to 5 favorites in localStorage; quick access chips in header.
- Offline fallback: show last successfully loaded city from localStorage when offline.
- PWA basics: manifest.json + service worker caching static assets (keep minimal).
- Simple rate-limit guard: ensure no more than 1 outbound API call per 500ms per client action.

========================
UI/UX REQUIREMENTS
========================
- Layout: Header with app name, search bar, units toggle, “Use my location”; main area with two cards:
  - Card 1: Current Weather (top)
  - Card 2: Forecast with line chart and list (bottom)
- Style: Tailwind CDN; light/dark mode toggle (prefers-color-scheme detection with a manual override).
- Components:
  - Search input with clear (×) button.
  - Reusable “InfoRow” styles for label/value pairs.
  - Reusable “Card” with subtle hover and shadow.
- Icons: Use OpenWeatherMap’s icon codes or a simple icon set from a CDN.

========================
API CONTRACT (INTERNAL)
========================
Create backend routes:
- GET /           -> renders index.html
- GET /api/weather/current?city=...&units=metric|imperial
- GET /api/weather/current?lat=...&lon=...&units=...
- GET /api/weather/forecast?city=...&units=...
- GET /api/weather/forecast?lat=...&lon=...&units=...
Responses:
- current: { city, country, local_time_iso, timezone_offset, temp, feels_like, humidity, wind_speed, description, icon }
- forecast: { city, country, timezone_offset, points: [ { ts_iso, temp, icon, description } ] }

========================
FILE STRUCTURE
========================
Create exactly these files with working contents:
- app.py (Flask app, routes, caching, API client)
- services/weather_api.py (API calls + mapping to internal contract)
- services/cache.py (TTL cache)
- static/js/app.js (fetching, UI updates, geolocation, units toggling, chart rendering)
- static/css/custom.css (minor overrides)
- templates/base.html (layout, Tailwind, JS, Chart.js)
- templates/index.html (UI)
- tests/test_weather_api.py (pytest for mapping and error cases)
- tests/test_cache.py
- README.md
- requirements.txt
- .replit and replit.nix (or provide explicit Replit run command instructions)
- (Optional) manifest.json and static/sw.js if you implement PWA

========================
IMPLEMENTATION DETAILS
========================
- Weather API key is read from env: os.environ["WEATHER_API_KEY"]; if missing, return a 500 with a clear message in JSON for /api/* routes.
- Map OpenWeatherMap fields to the internal response shape; convert timestamps to ISO strings adjusted by timezone offset.
- Units handling:
  - metric => °C, m/s
  - imperial => °F, mph
  - Ensure consistent unit labels in UI and tooltip on Chart.js.
- Chart.js:
  - One line chart for temperature over time.
  - X-axis: local time labels (e.g., “Tue 14:00”).
  - Y-axis: temperature with unit in axis title.
- Caching:
  - cache_key = f"{endpoint}:{query}:{units}"
  - TTL=600 seconds; provide get/set helpers; include hit/miss logs.
- Error handling:
  - If OpenWeatherMap returns 404 -> surface “City not found”.
  - If 401 -> “Invalid or missing API key”.
  - If 429 -> “Rate limit reached, try again later”.
  - Network errors -> “Network error, please check connection”.
- Security:
  - Do not expose the API key to the browser; all calls to OpenWeatherMap must originate from the Flask server.
- Testing:
  - Mock requests to OpenWeatherMap; test mapping correctness and error propagation.
  - Test cache expiry behavior.

========================
REPLIT INSTRUCTIONS
========================
- Add WEATHER_API_KEY in Replit: Tools → Secrets → Key: WEATHER_API_KEY, Value: <your key>.
- requirements.txt should include: flask, requests, python-dotenv, pytest.
- Run command: python app.py
- If you add pytest, include instructions: pytest -q

========================
ACCEPTANCE CRITERIA
========================
- I can search “Mumbai”, see current weather and a 5-day charted forecast, switch to imperial, and it updates instantly without page reload.
- Clicking “Use my location” retrieves geolocation and loads weather without errors.
- Repeated searches within 10 minutes are served from cache (verify via console logs).
- Graceful error messages appear for invalid city, bad API key, or network failure.
- Tests run and pass locally on Replit.

Now produce:
1) The project plan,
2) All files with full contents,
3) Setup instructions,
4) Tests,
5) README,
6) Future improvements.
Make reasonable assumptions. Do not ask me questions. Ensure the code runs on first try in Replit.
